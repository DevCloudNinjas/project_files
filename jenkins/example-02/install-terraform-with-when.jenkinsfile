pipeline {
    agent { label 'agent-with-ubuntu-22lts' }

    environment {
        TERRAFORM_BANARY_NAME_1 = 'tf1.8.4'
        TERRAFORM_BANARY_NAME_2 = 'tf1.0.0'
        TERRAFORM_BANARY_NAME_3 = 'tf0.15.0'
    }

    options {
        timeout(time: 30, unit: 'MINUTES') // Timeout for the entire pipeline
        buildDiscarder(logRotator(numToKeepStr: '7')) // Discard old builds to save disk space
        disableConcurrentBuilds() // Ensures that only one build can run at a time
        timestamps() // Adds timestamps to the console output
        skipDefaultCheckout() // Skips the default checkout of source code, useful if you're doing a custom checkout
        // retry(3) // Automatically retries the entire pipeline up to 3 times if it fails
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'feature-s8tia', description: '')
        choice(name: 'TERRAFORM_VERSION', choices: ['', '1.8.4', '1.0.0', '0.15.0'], description: 'Select the version that you want to install')
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    git credentialsId: 'del-s8-github-auth',
                        url: 'https://github.com/DEL-ORG/s8-web-2.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
        }
        stage('Installing Terraform version 1.8.4') {
            when {
                expression {
                    return params.TERRAFORM_VERSION == '1.8.4'
                }
            }
            steps {
                script {
                    installingTerraform()
                }
            }
        }
        stage('Installing Terraform version 1.0.0') {
            when {
                expression {
                    return params.TERRAFORM_VERSION == '1.0.0'
                }
            }
            steps {
                script {
                    installingTerraform()
                }
            }
        }
        stage('Installing Terraform version 0.15.0') {
            when {
                expression {
                    return params.TERRAFORM_VERSION == '0.15.0'
                }
            }
            steps {
                script {
                    installingTerraform()
                }
            }
        }
    }
}


def installingTerraform() {
    sh """
        #!/bin/
        # Install dependencies
        sudo apt-get update -y
        sudo apt-get install -y wget unzip
        rm -rf *
        wget https://releases.hashicorp.com/terraform/${params.TERRAFORM_VERSION}/terraform_${params.TERRAFORM_VERSION}_linux_amd64.zip
        unzip terraform_${params.TERRAFORM_VERSION}_linux_amd64.zip
        sudo rm -rf /usr/local/bin/terraform
        sudo mv terraform /usr/local/bin/
        # Verify installation
        terraform --version
    """
}