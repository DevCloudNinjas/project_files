pipeline {
    agent any

    environment {
        DOCKER_REGISTERY = ""
    }

    triggers {
        githubPush()
    }

    options {
        timeout(time: 1, unit: 'HOURS') // Set timeout for the entire pipeline
        timestamps() // Add timestamps to the console output
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 's8tia', description: '')
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    git credentialsId: 'jenkins-ssh-agents-private-key',
                        url: 'git@github.com:DEL-ORG/s8-web-2.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
        }
        stage('List repos') {
            steps {
                script {
                    sh """
                        echo "Checking the repository ...................."
                        sleep 5
                        ls
                    """
                }
            }
        }
        stage('Scan the code') {
            steps {
                script {
                    sh """
                        echo "Scaning the code ...................."
                        sleep 5
                        ls
                    """
                }
            }
        }
        stage('Building the code') {
            steps {
                script {
                    sh """
                        echo "Building the code ...................."
                        sleep 5
                        ls
                    """
                }
            }
        }
        stage('Login into artifactory') {
            steps {
                script {
                    sh """
                        echo "Login into artifactory ...................."
                        sleep 5
                        ls
                    """
                }
            }
        }
        stage('Pushing the code') {
            steps {
                script {
                    sh """
                        echo "Pushing the code ...................."
                        sleep 5
                        ls
                    """
                }
            }
        }
        stage('Deploying the application') {
            steps {
                script {
                    sh """
                        echo "Deploying the application ...................."
                        sleep 5
                        ls
                    """
                }
            }
        }
        stage('Checking if the application is up') {
            steps {
                script {
                    sh """
                        echo "Checking if the application is up ...................."
                        sleep 5
                        ls
                    """
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    cleanWs()
                }
            }
        }
    }
    post {
        success {
            slackSend color: '#2EB67D',
            channel: 's8-session-jenkins-alerts', 
            message: "*SESSION 08 PROJECT*" +
            "\n Project Name: Revive" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : *SUCCESS*" +
            "\n Build url : ${env.BUILD_URL}"
        }
        failure {
            slackSend color: '#E01E5A',
            channel: 's8-session-jenkins-alerts',  
            message: "*SESSION 08 PROJECT*" +
            "\n Project Name: Revive" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : *FAILED*" +
            "\n Action : Please check the console output to fix this job IMMEDIATELY" +
            "\n Build url : ${env.BUILD_URL}"
        }
        unstable {
            slackSend color: '#ECB22E',
            channel: 's8-session-jenkins-alerts', 
            message: "*SESSION 08 PROJECT*" +
            "\n Project Name: Revive" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : *UNSTABLE*" +
            "\n Action : Please check the console output to fix this job IMMEDIATELY" +
            "\n Build url : ${env.BUILD_URL}"
        }   
    }
}
